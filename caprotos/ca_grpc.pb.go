// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: ca.proto

package caprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CertificateAuthorityClient is the client API for CertificateAuthority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertificateAuthorityClient interface {
	// Tenant signing certificate lifecycle management RPCs.
	CreateTenantSigningCertificate(ctx context.Context, in *CreateTenantSigningCertificateRequest, opts ...grpc.CallOption) (*CreateTenantSigningCertificateResponse, error)
	GetTenantSigningCertificate(ctx context.Context, in *GetTenantSigningCertificateRequest, opts ...grpc.CallOption) (*GetTenantSigningCertificateResponse, error)
	DeleteTenantSigningCertificate(ctx context.Context, in *DeleteTenantSigningCertificateRequest, opts ...grpc.CallOption) (*DeleteTenantSigningCertificateResponse, error)
	// Device certificate lifecycle management RPCs.
	CreateDeviceCertificate(ctx context.Context, in *CreateDeviceCertificateRequest, opts ...grpc.CallOption) (*CreateDeviceCertificateResponse, error)
	RenewDeviceCertificate(ctx context.Context, in *RenewDeviceCertificateRequest, opts ...grpc.CallOption) (*RenewDeviceCertificateResponse, error)
	// Health check/uptime check RPC.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type certificateAuthorityClient struct {
	cc grpc.ClientConnInterface
}

func NewCertificateAuthorityClient(cc grpc.ClientConnInterface) CertificateAuthorityClient {
	return &certificateAuthorityClient{cc}
}

func (c *certificateAuthorityClient) CreateTenantSigningCertificate(ctx context.Context, in *CreateTenantSigningCertificateRequest, opts ...grpc.CallOption) (*CreateTenantSigningCertificateResponse, error) {
	out := new(CreateTenantSigningCertificateResponse)
	err := c.cc.Invoke(ctx, "/caprotos.CertificateAuthority/CreateTenantSigningCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) GetTenantSigningCertificate(ctx context.Context, in *GetTenantSigningCertificateRequest, opts ...grpc.CallOption) (*GetTenantSigningCertificateResponse, error) {
	out := new(GetTenantSigningCertificateResponse)
	err := c.cc.Invoke(ctx, "/caprotos.CertificateAuthority/GetTenantSigningCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) DeleteTenantSigningCertificate(ctx context.Context, in *DeleteTenantSigningCertificateRequest, opts ...grpc.CallOption) (*DeleteTenantSigningCertificateResponse, error) {
	out := new(DeleteTenantSigningCertificateResponse)
	err := c.cc.Invoke(ctx, "/caprotos.CertificateAuthority/DeleteTenantSigningCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) CreateDeviceCertificate(ctx context.Context, in *CreateDeviceCertificateRequest, opts ...grpc.CallOption) (*CreateDeviceCertificateResponse, error) {
	out := new(CreateDeviceCertificateResponse)
	err := c.cc.Invoke(ctx, "/caprotos.CertificateAuthority/CreateDeviceCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) RenewDeviceCertificate(ctx context.Context, in *RenewDeviceCertificateRequest, opts ...grpc.CallOption) (*RenewDeviceCertificateResponse, error) {
	out := new(RenewDeviceCertificateResponse)
	err := c.cc.Invoke(ctx, "/caprotos.CertificateAuthority/RenewDeviceCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/caprotos.CertificateAuthority/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateAuthorityServer is the server API for CertificateAuthority service.
// All implementations must embed UnimplementedCertificateAuthorityServer
// for forward compatibility
type CertificateAuthorityServer interface {
	// Tenant signing certificate lifecycle management RPCs.
	CreateTenantSigningCertificate(context.Context, *CreateTenantSigningCertificateRequest) (*CreateTenantSigningCertificateResponse, error)
	GetTenantSigningCertificate(context.Context, *GetTenantSigningCertificateRequest) (*GetTenantSigningCertificateResponse, error)
	DeleteTenantSigningCertificate(context.Context, *DeleteTenantSigningCertificateRequest) (*DeleteTenantSigningCertificateResponse, error)
	// Device certificate lifecycle management RPCs.
	CreateDeviceCertificate(context.Context, *CreateDeviceCertificateRequest) (*CreateDeviceCertificateResponse, error)
	RenewDeviceCertificate(context.Context, *RenewDeviceCertificateRequest) (*RenewDeviceCertificateResponse, error)
	// Health check/uptime check RPC.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedCertificateAuthorityServer()
}

// UnimplementedCertificateAuthorityServer must be embedded to have forward compatible implementations.
type UnimplementedCertificateAuthorityServer struct {
}

func (UnimplementedCertificateAuthorityServer) CreateTenantSigningCertificate(context.Context, *CreateTenantSigningCertificateRequest) (*CreateTenantSigningCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenantSigningCertificate not implemented")
}
func (UnimplementedCertificateAuthorityServer) GetTenantSigningCertificate(context.Context, *GetTenantSigningCertificateRequest) (*GetTenantSigningCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantSigningCertificate not implemented")
}
func (UnimplementedCertificateAuthorityServer) DeleteTenantSigningCertificate(context.Context, *DeleteTenantSigningCertificateRequest) (*DeleteTenantSigningCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenantSigningCertificate not implemented")
}
func (UnimplementedCertificateAuthorityServer) CreateDeviceCertificate(context.Context, *CreateDeviceCertificateRequest) (*CreateDeviceCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceCertificate not implemented")
}
func (UnimplementedCertificateAuthorityServer) RenewDeviceCertificate(context.Context, *RenewDeviceCertificateRequest) (*RenewDeviceCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewDeviceCertificate not implemented")
}
func (UnimplementedCertificateAuthorityServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCertificateAuthorityServer) mustEmbedUnimplementedCertificateAuthorityServer() {}

// UnsafeCertificateAuthorityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertificateAuthorityServer will
// result in compilation errors.
type UnsafeCertificateAuthorityServer interface {
	mustEmbedUnimplementedCertificateAuthorityServer()
}

func RegisterCertificateAuthorityServer(s grpc.ServiceRegistrar, srv CertificateAuthorityServer) {
	s.RegisterService(&CertificateAuthority_ServiceDesc, srv)
}

func _CertificateAuthority_CreateTenantSigningCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantSigningCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).CreateTenantSigningCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caprotos.CertificateAuthority/CreateTenantSigningCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).CreateTenantSigningCertificate(ctx, req.(*CreateTenantSigningCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_GetTenantSigningCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantSigningCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).GetTenantSigningCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caprotos.CertificateAuthority/GetTenantSigningCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).GetTenantSigningCertificate(ctx, req.(*GetTenantSigningCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_DeleteTenantSigningCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantSigningCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).DeleteTenantSigningCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caprotos.CertificateAuthority/DeleteTenantSigningCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).DeleteTenantSigningCertificate(ctx, req.(*DeleteTenantSigningCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_CreateDeviceCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).CreateDeviceCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caprotos.CertificateAuthority/CreateDeviceCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).CreateDeviceCertificate(ctx, req.(*CreateDeviceCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_RenewDeviceCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewDeviceCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).RenewDeviceCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caprotos.CertificateAuthority/RenewDeviceCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).RenewDeviceCertificate(ctx, req.(*RenewDeviceCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caprotos.CertificateAuthority/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CertificateAuthority_ServiceDesc is the grpc.ServiceDesc for CertificateAuthority service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CertificateAuthority_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "caprotos.CertificateAuthority",
	HandlerType: (*CertificateAuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTenantSigningCertificate",
			Handler:    _CertificateAuthority_CreateTenantSigningCertificate_Handler,
		},
		{
			MethodName: "GetTenantSigningCertificate",
			Handler:    _CertificateAuthority_GetTenantSigningCertificate_Handler,
		},
		{
			MethodName: "DeleteTenantSigningCertificate",
			Handler:    _CertificateAuthority_DeleteTenantSigningCertificate_Handler,
		},
		{
			MethodName: "CreateDeviceCertificate",
			Handler:    _CertificateAuthority_CreateDeviceCertificate_Handler,
		},
		{
			MethodName: "RenewDeviceCertificate",
			Handler:    _CertificateAuthority_RenewDeviceCertificate_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _CertificateAuthority_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ca.proto",
}
