// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: device_cert.proto

package caprotos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateDeviceCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header including protocol version & request identifier.
	Header *CaRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Version of the CreateDeviceCertificateRequest message.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Unique identifier for the tenant (Tenant ID).
	Tid string `protobuf:"bytes,3,opt,name=tid,proto3" json:"tid,omitempty"`
	// Certificate signing request (CSR).
	Csr []byte `protobuf:"bytes,4,opt,name=csr,proto3" json:"csr,omitempty"`
}

func (x *CreateDeviceCertificateRequest) Reset() {
	*x = CreateDeviceCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_cert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceCertificateRequest) ProtoMessage() {}

func (x *CreateDeviceCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_cert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceCertificateRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceCertificateRequest) Descriptor() ([]byte, []int) {
	return file_device_cert_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDeviceCertificateRequest) GetHeader() *CaRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateDeviceCertificateRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateDeviceCertificateRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *CreateDeviceCertificateRequest) GetCsr() []byte {
	if x != nil {
		return x.Csr
	}
	return nil
}

type CreateDeviceCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header including protocol version & request identifier.
	Header *CaResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Device certificate issued timestamp.
	IssuedTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=issued_time,json=issuedTime,proto3" json:"issued_time,omitempty"`
	// Device certificate expiry timestamp.
	ExpiryTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	// Unique identifier issued to the device.
	DeviceId string `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Device certificate (DER bytes).
	DeviceCertificate []byte `protobuf:"bytes,5,opt,name=device_certificate,json=deviceCertificate,proto3" json:"device_certificate,omitempty"`
	// Parent certificates - tenant signing certificate and
	// the CA certificate.
	ParentCertificates []byte `protobuf:"bytes,6,opt,name=parent_certificates,json=parentCertificates,proto3" json:"parent_certificates,omitempty"`
}

func (x *CreateDeviceCertificateResponse) Reset() {
	*x = CreateDeviceCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_cert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceCertificateResponse) ProtoMessage() {}

func (x *CreateDeviceCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_cert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceCertificateResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceCertificateResponse) Descriptor() ([]byte, []int) {
	return file_device_cert_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDeviceCertificateResponse) GetHeader() *CaResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateDeviceCertificateResponse) GetIssuedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedTime
	}
	return nil
}

func (x *CreateDeviceCertificateResponse) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *CreateDeviceCertificateResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CreateDeviceCertificateResponse) GetDeviceCertificate() []byte {
	if x != nil {
		return x.DeviceCertificate
	}
	return nil
}

func (x *CreateDeviceCertificateResponse) GetParentCertificates() []byte {
	if x != nil {
		return x.ParentCertificates
	}
	return nil
}

type RenewDeviceCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header including protocol version & request identifier.
	Header *CaRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Version of the RenewDeviceCertificateRequest message.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Unique identifier for the tenant (Tenant ID).
	Tid string `protobuf:"bytes,3,opt,name=tid,proto3" json:"tid,omitempty"`
	// Unique identifier issued to the device.
	DeviceId string `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Certificate signing request (CSR).
	Csr []byte `protobuf:"bytes,5,opt,name=csr,proto3" json:"csr,omitempty"`
}

func (x *RenewDeviceCertificateRequest) Reset() {
	*x = RenewDeviceCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_cert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewDeviceCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewDeviceCertificateRequest) ProtoMessage() {}

func (x *RenewDeviceCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_cert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewDeviceCertificateRequest.ProtoReflect.Descriptor instead.
func (*RenewDeviceCertificateRequest) Descriptor() ([]byte, []int) {
	return file_device_cert_proto_rawDescGZIP(), []int{2}
}

func (x *RenewDeviceCertificateRequest) GetHeader() *CaRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RenewDeviceCertificateRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RenewDeviceCertificateRequest) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *RenewDeviceCertificateRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RenewDeviceCertificateRequest) GetCsr() []byte {
	if x != nil {
		return x.Csr
	}
	return nil
}

type RenewDeviceCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header including protocol version & request identifier.
	Header *CaResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Renewed device certificate issued timestamp.
	IssuedTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=issued_time,json=issuedTime,proto3" json:"issued_time,omitempty"`
	// Device certificate expiry timestamp.
	ExpiryTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	// Unique identifier issued to the device.
	DeviceId string `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Device certificate (DER bytes).
	DeviceCertificate []byte `protobuf:"bytes,5,opt,name=device_certificate,json=deviceCertificate,proto3" json:"device_certificate,omitempty"`
	// Parent certificates - tenant signing certificate and
	// the CA certificate.
	ParentCertificates []byte `protobuf:"bytes,6,opt,name=parent_certificates,json=parentCertificates,proto3" json:"parent_certificates,omitempty"`
}

func (x *RenewDeviceCertificateResponse) Reset() {
	*x = RenewDeviceCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_cert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewDeviceCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewDeviceCertificateResponse) ProtoMessage() {}

func (x *RenewDeviceCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_cert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewDeviceCertificateResponse.ProtoReflect.Descriptor instead.
func (*RenewDeviceCertificateResponse) Descriptor() ([]byte, []int) {
	return file_device_cert_proto_rawDescGZIP(), []int{3}
}

func (x *RenewDeviceCertificateResponse) GetHeader() *CaResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RenewDeviceCertificateResponse) GetIssuedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedTime
	}
	return nil
}

func (x *RenewDeviceCertificateResponse) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *RenewDeviceCertificateResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *RenewDeviceCertificateResponse) GetDeviceCertificate() []byte {
	if x != nil {
		return x.DeviceCertificate
	}
	return nil
}

func (x *RenewDeviceCertificateResponse) GetParentCertificates() []byte {
	if x != nil {
		return x.ParentCertificates
	}
	return nil
}

var File_device_cert_proto protoreflect.FileDescriptor

var file_device_cert_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x0f, 0x63,
	0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x91, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x63, 0x73, 0x72, 0x22, 0xcc, 0x02, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x43, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63,
	0x73, 0x72, 0x22, 0xcb, 0x02, 0x0a, 0x1e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x43, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x7a, 0x63, 0x2e, 0x65,
	0x78, 0x74, 0x2e, 0x68, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x6e, 0x2f, 0x63, 0x61, 0x2f, 0x63, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_device_cert_proto_rawDescOnce sync.Once
	file_device_cert_proto_rawDescData = file_device_cert_proto_rawDesc
)

func file_device_cert_proto_rawDescGZIP() []byte {
	file_device_cert_proto_rawDescOnce.Do(func() {
		file_device_cert_proto_rawDescData = protoimpl.X.CompressGZIP(file_device_cert_proto_rawDescData)
	})
	return file_device_cert_proto_rawDescData
}

var file_device_cert_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_device_cert_proto_goTypes = []interface{}{
	(*CreateDeviceCertificateRequest)(nil),  // 0: caprotos.CreateDeviceCertificateRequest
	(*CreateDeviceCertificateResponse)(nil), // 1: caprotos.CreateDeviceCertificateResponse
	(*RenewDeviceCertificateRequest)(nil),   // 2: caprotos.RenewDeviceCertificateRequest
	(*RenewDeviceCertificateResponse)(nil),  // 3: caprotos.RenewDeviceCertificateResponse
	(*CaRequestHeader)(nil),                 // 4: caprotos.CaRequestHeader
	(*CaResponseHeader)(nil),                // 5: caprotos.CaResponseHeader
	(*timestamppb.Timestamp)(nil),           // 6: google.protobuf.Timestamp
}
var file_device_cert_proto_depIdxs = []int32{
	4, // 0: caprotos.CreateDeviceCertificateRequest.header:type_name -> caprotos.CaRequestHeader
	5, // 1: caprotos.CreateDeviceCertificateResponse.header:type_name -> caprotos.CaResponseHeader
	6, // 2: caprotos.CreateDeviceCertificateResponse.issued_time:type_name -> google.protobuf.Timestamp
	6, // 3: caprotos.CreateDeviceCertificateResponse.expiry_time:type_name -> google.protobuf.Timestamp
	4, // 4: caprotos.RenewDeviceCertificateRequest.header:type_name -> caprotos.CaRequestHeader
	5, // 5: caprotos.RenewDeviceCertificateResponse.header:type_name -> caprotos.CaResponseHeader
	6, // 6: caprotos.RenewDeviceCertificateResponse.issued_time:type_name -> google.protobuf.Timestamp
	6, // 7: caprotos.RenewDeviceCertificateResponse.expiry_time:type_name -> google.protobuf.Timestamp
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_device_cert_proto_init() }
func file_device_cert_proto_init() {
	if File_device_cert_proto != nil {
		return
	}
	file_ca_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_device_cert_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_cert_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_cert_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewDeviceCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_cert_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewDeviceCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_device_cert_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_device_cert_proto_goTypes,
		DependencyIndexes: file_device_cert_proto_depIdxs,
		MessageInfos:      file_device_cert_proto_msgTypes,
	}.Build()
	File_device_cert_proto = out.File
	file_device_cert_proto_rawDesc = nil
	file_device_cert_proto_goTypes = nil
	file_device_cert_proto_depIdxs = nil
}
